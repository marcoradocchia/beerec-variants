use beerec_variants::Variants;
pub enum Weekday {
    Monday,
    #[variants(rename_abbr = "tue")]
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday,
}
impl ::std::clone::Clone for Weekday {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::marker::Copy for Weekday {}
#[automatically_derived]
impl Weekday {
    /// The array of iterable (i.e. non-skipped) enum variants.
    const ITERABLE_VARIANTS: [Self; 7usize] = [
        Self::Monday,
        Self::Tuesday,
        Self::Wednesday,
        Self::Thursday,
        Self::Friday,
        Self::Saturday,
        Self::Sunday,
    ];
    #[inline]
    #[must_use]
    /**Returns a string representation of the [`Weekday`] variant.

# Notes

String representation of enum variants generated by the [`Variants`] macro can
be overridden by marking the enum variant as `#[variants(rename = "<override>")]`.*/
    pub fn as_str(self) -> &'static str {
        match self {
            Self::Monday => "Monday",
            Self::Tuesday => "Tuesday",
            Self::Wednesday => "Wednesday",
            Self::Thursday => "Thursday",
            Self::Friday => "Friday",
            Self::Saturday => "Saturday",
            Self::Sunday => "Sunday",
        }
    }
    #[inline]
    #[must_use]
    /**Returns an abbreviated string representation of the [`Weekday`] variant.

# Notes

The abbreviated string representation of enum variants generated
by the [`Variants`] macro is determined by the following decreasing
priority list.
- **Abbreviated string representation override**: if the variant is marked
  as `#[variants(rename_abbr = "<override>")]`, returns the provided
  `<override>` value.
- **String representation override**: if the variant is marked as
  `#[variants(rename = "<override>")]` but has no `rename_abbr`, returns
  a string slice of the first three characters of the `<override>` value.
- **Default behavior**: if neither of `rename` or `rename_abbr` is specified,
  returns a string slice of the first three character of the variant's
  identifier.*/
    pub fn as_abbr_str(self) -> &'static str {
        match self {
            Self::Monday => "Mon",
            Self::Tuesday => "tue",
            Self::Wednesday => "Wed",
            Self::Thursday => "Thu",
            Self::Friday => "Fri",
            Self::Saturday => "Sat",
            Self::Sunday => "Sun",
        }
    }
    /// Iterates over enum variants.
    ///
    /// # Notes
    ///
    /// Enum variants marked as `#[variants(skip)]` are ignored.
    pub fn iter_variants() -> impl ::std::iter::Iterator<Item = Self> {
        Self::ITERABLE_VARIANTS.into_iter()
    }
    /**Iterates over string representation of enum variants.
See `Weekday::as_str` for further details about yielded values.

# Notes

Enum variants marked as `#[variants(skip)]` are excluded from iteration.*/
    pub fn iter_variants_as_str() -> impl ::std::iter::Iterator<Item = &'static str> {
        Self::iter_variants().map(Self::as_str)
    }
    /**Iterates over abbreviated string representation of enum variants.
See `Weekday::as_abbr_str` for further details about yielded values.

# Notes

Enum variants marked as `#[variants(skip)]` are excluded from iteration.*/
    pub fn iter_variants_as_abbr_str() -> impl ::std::iter::Iterator<
        Item = &'static str,
    > {
        Self::iter_variants().map(Self::as_abbr_str)
    }
}
