use beerec_variants::Variants;
#[variants(deserialize)]
pub enum Weekday {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday,
}
impl ::std::marker::Copy for Weekday {}
impl ::std::clone::Clone for Weekday {
    fn clone(&self) -> Self {
        *self
    }
}
#[automatically_derived]
impl Weekday {
    ///The array of _iterable_ (i.e. non-skipped) [`Weekday`] variants.
    const ITERABLE_VARIANTS: [Self; 7usize] = [
        Self::Monday,
        Self::Tuesday,
        Self::Wednesday,
        Self::Thursday,
        Self::Friday,
        Self::Saturday,
        Self::Sunday,
    ];
    ///The number of _iterable_ (i.e. non-skipped) [`Weekday`] variants.
    const ITERABLE_VARIANTS_COUNT: usize = 7usize;
    #[inline]
    #[must_use]
    /**Returns a string representation of the [`Weekday`] variant.

# Notes

This method is generated by the [`Variants`] derive macro from the [`beerec-variants`]
crate, it applies rename strategies following a priority-based fallback approach:

1. [`InnerRenameStrategy`] (_highest priority_) - uses the string
   produced by the rename strategy from the `#[variants(rename(...))]`
   attribute, if one has been specified for the variant;
1. [`OuterRenameStrategy`] (_fallback_) - uses the string produced by the
   rename strategy from the `#[variants(rename(...))]` attribute, if one has
   been specified for the type;
1. **No renaming** (_default_) - converts the variant identifier to a string
   if neither the type-level nor the variant-level rename attribute has been
   specified.

[`beerec-variants`]: https://docs.rs/beerec-variants
[`Variants`]: https://docs.rs/beerec-variants/latest/beerec_variants/derive.Variants.html*/
    pub const fn as_str(self) -> &'static str {
        match self {
            Self::Monday => "Monday",
            Self::Tuesday => "Tuesday",
            Self::Wednesday => "Wednesday",
            Self::Thursday => "Thursday",
            Self::Friday => "Friday",
            Self::Saturday => "Saturday",
            Self::Sunday => "Sunday",
        }
    }
    #[inline]
    #[must_use]
    /**Returns an abbreviated string representation of the [`Weekday`] variant.

# Notes

This method is generated by the [`Variants`] derive macro from the [`beerec-variants`]
crate, it applies rename strategies on the string representation of the
variant, following a priority-based fallback approach:

1. [`InnerRenameStrategy`] (_highest priority_) - uses the abbreviated
   string produced by the rename strategy from the `#[variants(rename_abbr(...))]`
   attribute, if one has been specified for the variant;
1. [`OuterRenameStrategy`] (_fallback_) - uses the abbreviated string produced
   by the rename strategy from the `#[variants(rename_abbr(...))]` attribute, if
   one has been specified for the type;
1. **No renaming** (_default_) - abbreviates the full length string representation
   of the variant as is, without applying any renaming strategy.

Likewise, the renaming follows a priority-based fallback approach to
determine the full length string representation before applying the
abbreviation:

1. **Variant-level attribute** (_highest priority_) - uses the string
   produced by the rename strategy from the `#[variants(rename(...))]`
   attribute, if one has been specified for the type;
1. **Type-level attribute** (_fallback_) - uses the string produced by the
   rename strategy from the `#[variants(rename(...))]` attribute, if one has
   been specified for the type;
1. **No renaming** (_default_) - converts the variant identifier to a string
   if neither the type-level nor the variant-level rename attribute has been
   specified.

[`beerec-variants`]: https://docs.rs/beerec-variants
[`Variants`]: https://docs.rs/beerec-variants/latest/beerec_variants/derive.Variants.html*/
    pub const fn as_str_abbr(self) -> &'static str {
        match self {
            Self::Monday => "Mon",
            Self::Tuesday => "Tue",
            Self::Wednesday => "Wed",
            Self::Thursday => "Thu",
            Self::Friday => "Fri",
            Self::Saturday => "Sat",
            Self::Sunday => "Sun",
        }
    }
    /**Iterates over _iterable_ (i.e. non-skipped) [`Weekday`] variants.

# Notes

This method is generated by the [`Variants`] derive macro from the [`beerec-variants`] crate,
enum variants marked with the `#[variants(skip)]` attribute are excluded from iteration.

[`beerec-variants`]: https://docs.rs/beerec-variants
[`Variants`]: https://docs.rs/beerec-variants/latest/beerec_variants/derive.Variants.html*/
    pub fn iter_variants() -> impl ::std::iter::Iterator<Item = Self> {
        Self::ITERABLE_VARIANTS.into_iter()
    }
    /**Iterates over _iterable_ (i.e. non-skipped) string representations of [`Weekday`]
variants.

See [`Weekday::as_str`] for further details about yielded values.

# Notes

This method is generated by the [`Variants`] derive macro from the [`beerec-variants`] crate,
enum variants marked with the `#[variants(skip)]` attribute are excluded from iteration.

[`beerec-variants`]: https://docs.rs/beerec-variants
[`Variants`]: https://docs.rs/beerec-variants/latest/beerec_variants/derive.Variants.html*/
    pub fn iter_variants_as_str() -> impl ::std::iter::Iterator<Item = &'static str> {
        Self::iter_variants().map(Self::as_str)
    }
    /**Iterates over _iterable_ (i.e. non-skipped) abbreviated string representations of
[`Weekday`] variants.

See [`Weekday::as_str_abbr`] for further details about yielded values.

# Notes

This method is generated by the [`Variants`] derive macro from the [`beerec-variants`] crate,
enum variants marked with the `#[variants(skip)]` attribute are excluded from iteration.

[`beerec-variants`]: https://docs.rs/beerec-variants
[`Variants`]: https://docs.rs/beerec-variants/latest/beerec_variants/derive.Variants.html*/
    pub fn iter_variants_as_str_abbr() -> impl ::std::iter::Iterator<
        Item = &'static str,
    > {
        Self::iter_variants().map(Self::as_str_abbr)
    }
    /**Returns a list of quoted (double-quotes) and comma separated string
representations of _iterable_ (i.e. non-skipped) [`Weekday`] variants.

See [`Weekday::as_str`] for further details about the string representations.

# Notes

This method is generated by the [`Variants`] derive macro from the [`beerec-variants`] crate,
enum variants marked with the `#[variants(skip)]` attribute are excluded from the listing.

[`beerec-variants`]: https://docs.rs/beerec-variants
[`Variants`]: https://docs.rs/beerec-variants/latest/beerec_variants/derive.Variants.html*/
    pub const fn variants_list_str() -> &'static str {
        "\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\""
    }
    /**Returns a list of quoted (double-quotes) and comma separated abbreviated string
representations of _iterable_ (i.e. non-skipped) [`Weekday`] variants.

See [`Weekday::as_str_abbr`] for further details about the abbreviated string representations.

# Notes

This method is generated by the [`Variants`] derive macro from the [`beerec-variants`] crate,
enum variants marked with the `#[variants(skip)]` attribute are excluded from the listing.

[`beerec-variants`]: https://docs.rs/beerec-variants
[`Variants`]: https://docs.rs/beerec-variants/latest/beerec_variants/derive.Variants.html*/
    pub const fn variants_list_str_abbr() -> &'static str {
        "\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\""
    }
}
impl<'de> ::serde::de::Deserialize<'de> for Weekday {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::de::Deserializer<'de>,
    {
        struct WeekdayVisitor;
        impl<'de> ::serde::de::Visitor<'de> for WeekdayVisitor {
            type Value = Weekday;
            fn expecting(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                ::std::fmt::Formatter::write_str(f, "one of ")?;
                ::std::fmt::Formatter::write_str(f, Weekday::variants_list_str())?;
                ::std::fmt::Formatter::write_str(f, " or one of ")?;
                ::std::fmt::Formatter::write_str(f, Weekday::variants_list_str_abbr())?;
                Ok(())
            }
            fn visit_str<E>(self, value: &str) -> ::std::result::Result<Self::Value, E>
            where
                E: ::serde::de::Error,
            {
                match value {
                    "Monday" | "Mon" => ::std::result::Result::Ok(Self::Value::Monday),
                    "Tuesday" | "Tue" => ::std::result::Result::Ok(Self::Value::Tuesday),
                    "Wednesday" | "Wed" => {
                        ::std::result::Result::Ok(Self::Value::Wednesday)
                    }
                    "Thursday" | "Thu" => {
                        ::std::result::Result::Ok(Self::Value::Thursday)
                    }
                    "Friday" | "Fri" => ::std::result::Result::Ok(Self::Value::Friday),
                    "Saturday" | "Sat" => {
                        ::std::result::Result::Ok(Self::Value::Saturday)
                    }
                    "Sunday" | "Sun" => ::std::result::Result::Ok(Self::Value::Sunday),
                    _ => {
                        let unexp = ::serde::de::Unexpected::Str(value);
                        let error = ::serde::de::Error::invalid_value(unexp, &self);
                        ::std::result::Result::Err(error)
                    }
                }
            }
        }
        deserializer.deserialize_str(WeekdayVisitor)
    }
}
